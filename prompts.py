def prepare_prompt(dataset, query, llm, examples=None, features=None, llm_gen=None):
    step = 2 if llm_gen else 1
    if dataset.name == "lamp":
        init_prompt = lamp_prompts(dataset.num, step)
    elif dataset.name == "amazon":
        init_prompt = amazon_prompts(step)
    if not llm_gen:
        if step == 1:
            features = "\n".join(features)
        else:
            features = None
        context = llm.prepare_context(init_prompt, f"{query}\n{features}", examples) 
        return init_prompt.format(query=query, examples=context, features=features)
    else:
        features = "\n".join(features)
        return init_prompt.format(query=query, features=features, llm_gen=llm_gen)
    
def strip_all(text: str) -> str:
    return "\n".join(line.strip() for line in text.splitlines())    

def amazon_prompts(step):
    if step == 1:
        return _ss_amazon_prompt()

def _ss_amazon_prompt() -> str:
    return strip_all("""You are an Amazon customer who writes reviews for the products you bought. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar product-reviews pairs from your past reviews:
                     <similarpairs>
                     {examples}
                     </similarpairs>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other writers:
                     <features>
                     {features}
                     </features>
                     Using the features, generate the proper review. If you haven't received any features besides similar pairs, only make use of them. 
                     Only output the review and nothing else.
                     Product:
                     {query}
                     Review:""")

def lamp_prompts(dataset_num: int, step: int) -> str:
    if step == 1:
        ss_lamp_prompts = {
            4: _ss_lamp_prompt_4,
            5: _ss_lamp_prompt_5,
            7: _ss_lamp_prompt_7
        }
        return ss_lamp_prompts.get(dataset_num)()
    else:
        ms_lamp_prompts = {
            4: _ms_lamp_prompt_4
        }
        return ms_lamp_prompts.get(dataset_num)()

def _ss_lamp_prompt_4() -> str:
    return strip_all("""You are a news editor that generates titles for articles. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar article-title pairs from your past works:
                     <similarpairs>
                     {examples}
                     </similarpairs>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other writers:
                     <features>
                     {features}
                     </features>
                     Using the features, generate the proper title. If you haven't received any features besides similar pairs, only make use of them. 
                     Only output the title and nothing else.
                     Article: 
                     {query}
                     Title:""")

def _ms_lamp_prompt_4():
    return strip_all("""You are a news editor. You have an intern that is tasked with generating titles for articles in your writing style.
                     You asked the intern to make the titles indistinguishable from yours, so someone who is familiar with your work would think it is generated by you.
                     The intern has checked your past work to generate a title in your style. 
                     Before publishing it, you want to check intern's generations and assess how much the intern was able to capture your style. 
                     You will receive a set of features shedding light into how you use words and formulate sentence: 
                     <features>
                     {features}
                     </features>
                     Now, you will receive the article and the title generated by the intern:
                     <article>
                     {query}
                     </article>
                     <interntitle>
                     {llm_gen}
                     </interntitle>
                     With the given features, evaluate the generation of the intern and propose an improved version of the title which would reflect your writing style better.  
                     Your output would consist of two parts:
                      1) Evaluation: Evaluating intern's work and assessing how it can be improved to catch your style. It should be concise, not excedding two sentences.
                      2) Title: An improved version of the title 
                     Rules:
                      - Don't put any information in the title that is not given in the article
                      - Your goal is not to make the title more catchy, but to make it sound like you
                      - Make minimal changes to the intern's title
                     You output should be in json format, having the evaluation and the title as keys. Only output the json and nothing else.""")

def _ss_lamp_prompt_5() -> str:
    return strip_all("""You are a scholar that generates titles for abstracts. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar abstract-title pairs from your past works:
                     <similarpairs>
                     {examples}
                     </similarpairs>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other writers:
                     <features>
                     {features}
                     </features>
                     Using the features, generate the proper title. If you haven't received any features besides similar pairs, only make use of them. 
                     Only output the title and nothing else.
                     Abstract:
                     {query}
                     Title:""")

def _ss_lamp_prompt_7() -> str:
    return strip_all("""You are a Twitter user who rephrases their own tweets. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar tweets from your past ones:
                     <similartweets>
                     {examples}
                     </similartweets>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other twiiter users:
                     <features>
                     {features}
                     </features>
                     Using the features, rephrase the tweet. If you haven't received any features besides similar tweets, only make use of them. 
                     Only output the rephrased tweet and nothing else.
                     Tweet:
                     {query}
                     Paraphrased Tweet:""")