def prepare_prompt(dataset, query, llm, examples, step_gen, features=None, llm_gen=None):
    if dataset.name == "lamp":
        init_prompt = lamp_prompts(dataset.num, step_gen)
    elif dataset.name == "amazon":
        init_prompt = amazon_prompts(step_gen)
    if step_gen == 1:
        context = llm.prepare_context(init_prompt, f"{query}\n{features}", examples) 
        if features:
            features = "\n".join(features)
        return init_prompt.format(query=query, examples=context, features=features)
    else:
        if not llm_gen:
            raise Exception("LLM generated output isn't received!")
        if not features:
            raise Exception("For multi-step generation, features can't be empty!")
        context = llm.prepare_context(init_prompt, f"{query}\n{features}\n{llm_gen}", examples) 
        return init_prompt.format(query=query, examples=context, features=features, llm_gen=llm_gen)
    
def strip_all(text: str) -> str:
    return "\n".join(line.strip() for line in text.splitlines())

def amazon_prompts(step):
    if step == 1:
        return _ss_amazon_prompt()

def _ss_amazon_prompt() -> str:
    return strip_all("""You are an Amazon customer who writes reviews for the products you bought. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar product-reviews pairs from your past reviews:
                     <SimilarPairs>
                     {examples}
                     </SimilarPairs>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other writers:
                     {features}
                     Using the features, generate the proper review. If you haven't received any features besides similar pairs, only make use of them. 
                     Only output the review and nothing else.
                     Product:
                     {query}
                     Review:""")

def lamp_prompts(dataset_num: int, step: int) -> str:
    if step == 1:
        ss_lamp_prompts = {
            4: _ss_lamp_prompt_4,
            5: _ss_lamp_prompt_5,
            7: _ss_lamp_prompt_7
        }
        return ss_lamp_prompts.get(dataset_num)()
    else:
        ms_lamp_prompts = {
            4: _ms_lamp_prompt_4
        }
        return ms_lamp_prompts.get(dataset_num)()

def _ss_lamp_prompt_4() -> str:
    return strip_all("""You are a news editor that generates titles for articles. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar article-title pairs from your past works:
                     <SimilarPairs>
                     {examples}
                     </SimilarPairs>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other writers:
                     {features}
                     Using the features, generate the proper title. If you haven't received any features besides similar pairs, only make use of them. 
                     Only output the title and nothing else.
                     Article: 
                     {query}
                     Title:""")

def _ms_lamp_prompt_4():
    return strip_all("""You are a news editor that delegated the task of generating titles for articles to your new intern. The intern has checked your past work to generate 
                     a title in your style. To improve the quality, you will check intern's generations and change them according to your standards. You will first receive similar
                     article-title pairs from your past works to remind you of your writing style:
                     <SimilarPairs>
                     {examples}
                     </SimilarPairs>
                     Now you will receive a set of features shedding light into how you use words and formulate sentences, compared to other writers. 
                     {features}
                     Finally, you will receive the article and the title generated by the intern:
                     <article>
                     {query}
                     </article>
                     <interntitle>
                     {llm_gen}
                     </interntitle>
                     Your output would consist of two parts:
                      1) Explanation about what the intern has missed by using the features, explaining how it can be improved to match your style of generating titles.
                      2) The title you would give to the article, using the provided information.
                     You output should be in json format, having the explanation and the title as keys. Only output the json and nothing else.""")


def _ss_lamp_prompt_5() -> str:
    return strip_all("""You are a scholar that generates titles for abstracts. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar abstract-title pairs from your past works:
                     <SimilarPairs>
                     {examples}
                     </SimilarPairs>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other writers:
                     {features}
                     Using the features, generate the proper title. If you haven't received any features besides similar pairs, only make use of them. 
                     Only output the title and nothing else.
                     Abstract:
                     {query}
                     Title:""")

def _ss_lamp_prompt_7() -> str:
    return strip_all("""You are a Twitter user who rephrases their own tweets. You will be provided a set of features to help you understand your writing style.
                     First feature you will receive is similar tweets from your past ones:
                     <SimilarTweets>
                     {examples}
                     </SimilarTweets>
                     Now you will receive features shedding light into how you use words and formulates sentence, compared to other twiiter users:
                     {features}
                     Using the features, rephrase the tweet. If you haven't received any features besides similar tweets, only make use of them. 
                     Only output the rephrased tweet and nothing else.
                     Tweet:
                     {query}
                     Paraphrased Tweet:""")